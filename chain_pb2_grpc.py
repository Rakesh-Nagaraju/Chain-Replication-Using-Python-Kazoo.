# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import chain_pb2 as chain__pb2


class HeadChainReplicaStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.proposeStateUpdate = channel.unary_unary(
        '/adb.HeadChainReplica/proposeStateUpdate',
        request_serializer=chain__pb2.HeadStateUpdateRequest.SerializeToString,
        response_deserializer=chain__pb2.ChainResponse.FromString,
        )
    self.getLatestXid = channel.unary_unary(
        '/adb.HeadChainReplica/getLatestXid',
        request_serializer=chain__pb2.LatestXidRequest.SerializeToString,
        response_deserializer=chain__pb2.LatestXidResponse.FromString,
        )
    self.stateTransfer = channel.unary_unary(
        '/adb.HeadChainReplica/stateTransfer',
        request_serializer=chain__pb2.HeadStateTransferRequest.SerializeToString,
        response_deserializer=chain__pb2.ChainResponse.FromString,
        )
    self.increment = channel.unary_unary(
        '/adb.HeadChainReplica/increment',
        request_serializer=chain__pb2.IncrementRequest.SerializeToString,
        response_deserializer=chain__pb2.HeadResponse.FromString,
        )
    self.delete = channel.unary_unary(
        '/adb.HeadChainReplica/delete',
        request_serializer=chain__pb2.DeleteRequest.SerializeToString,
        response_deserializer=chain__pb2.HeadResponse.FromString,
        )
    self.get = channel.unary_unary(
        '/adb.HeadChainReplica/get',
        request_serializer=chain__pb2.GetRequest.SerializeToString,
        response_deserializer=chain__pb2.GetResponse.FromString,
        )
    self.xidProcessed = channel.unary_unary(
        '/adb.HeadChainReplica/xidProcessed',
        request_serializer=chain__pb2.XidProcessedRequest.SerializeToString,
        response_deserializer=chain__pb2.ChainResponse.FromString,
        )


class HeadChainReplicaServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def proposeStateUpdate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getLatestXid(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stateTransfer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def increment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def xidProcessed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HeadChainReplicaServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'proposeStateUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.proposeStateUpdate,
          request_deserializer=chain__pb2.HeadStateUpdateRequest.FromString,
          response_serializer=chain__pb2.ChainResponse.SerializeToString,
      ),
      'getLatestXid': grpc.unary_unary_rpc_method_handler(
          servicer.getLatestXid,
          request_deserializer=chain__pb2.LatestXidRequest.FromString,
          response_serializer=chain__pb2.LatestXidResponse.SerializeToString,
      ),
      'stateTransfer': grpc.unary_unary_rpc_method_handler(
          servicer.stateTransfer,
          request_deserializer=chain__pb2.HeadStateTransferRequest.FromString,
          response_serializer=chain__pb2.ChainResponse.SerializeToString,
      ),
      'increment': grpc.unary_unary_rpc_method_handler(
          servicer.increment,
          request_deserializer=chain__pb2.IncrementRequest.FromString,
          response_serializer=chain__pb2.HeadResponse.SerializeToString,
      ),
      'delete': grpc.unary_unary_rpc_method_handler(
          servicer.delete,
          request_deserializer=chain__pb2.DeleteRequest.FromString,
          response_serializer=chain__pb2.HeadResponse.SerializeToString,
      ),
      'get': grpc.unary_unary_rpc_method_handler(
          servicer.get,
          request_deserializer=chain__pb2.GetRequest.FromString,
          response_serializer=chain__pb2.GetResponse.SerializeToString,
      ),
      'xidProcessed': grpc.unary_unary_rpc_method_handler(
          servicer.xidProcessed,
          request_deserializer=chain__pb2.XidProcessedRequest.FromString,
          response_serializer=chain__pb2.ChainResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adb.HeadChainReplica', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TailChainReplicaStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.proposeStateUpdate = channel.unary_unary(
        '/adb.TailChainReplica/proposeStateUpdate',
        request_serializer=chain__pb2.TailStateUpdateRequest.SerializeToString,
        response_deserializer=chain__pb2.ChainResponse.FromString,
        )
    self.getLatestXid = channel.unary_unary(
        '/adb.TailChainReplica/getLatestXid',
        request_serializer=chain__pb2.LatestXidRequest.SerializeToString,
        response_deserializer=chain__pb2.LatestXidResponse.FromString,
        )
    self.stateTransfer = channel.unary_unary(
        '/adb.TailChainReplica/stateTransfer',
        request_serializer=chain__pb2.TailStateTransferRequest.SerializeToString,
        response_deserializer=chain__pb2.ChainResponse.FromString,
        )
    self.increment = channel.unary_unary(
        '/adb.TailChainReplica/increment',
        request_serializer=chain__pb2.TailIncrementRequest.SerializeToString,
        response_deserializer=chain__pb2.HeadResponse.FromString,
        )
    self.delete = channel.unary_unary(
        '/adb.TailChainReplica/delete',
        request_serializer=chain__pb2.TailDeleteRequest.SerializeToString,
        response_deserializer=chain__pb2.HeadResponse.FromString,
        )
    self.get = channel.unary_unary(
        '/adb.TailChainReplica/get',
        request_serializer=chain__pb2.GetRequest.SerializeToString,
        response_deserializer=chain__pb2.GetResponse.FromString,
        )


class TailChainReplicaServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def proposeStateUpdate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getLatestXid(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stateTransfer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def increment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TailChainReplicaServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'proposeStateUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.proposeStateUpdate,
          request_deserializer=chain__pb2.TailStateUpdateRequest.FromString,
          response_serializer=chain__pb2.ChainResponse.SerializeToString,
      ),
      'getLatestXid': grpc.unary_unary_rpc_method_handler(
          servicer.getLatestXid,
          request_deserializer=chain__pb2.LatestXidRequest.FromString,
          response_serializer=chain__pb2.LatestXidResponse.SerializeToString,
      ),
      'stateTransfer': grpc.unary_unary_rpc_method_handler(
          servicer.stateTransfer,
          request_deserializer=chain__pb2.TailStateTransferRequest.FromString,
          response_serializer=chain__pb2.ChainResponse.SerializeToString,
      ),
      'increment': grpc.unary_unary_rpc_method_handler(
          servicer.increment,
          request_deserializer=chain__pb2.TailIncrementRequest.FromString,
          response_serializer=chain__pb2.HeadResponse.SerializeToString,
      ),
      'delete': grpc.unary_unary_rpc_method_handler(
          servicer.delete,
          request_deserializer=chain__pb2.TailDeleteRequest.FromString,
          response_serializer=chain__pb2.HeadResponse.SerializeToString,
      ),
      'get': grpc.unary_unary_rpc_method_handler(
          servicer.get,
          request_deserializer=chain__pb2.GetRequest.FromString,
          response_serializer=chain__pb2.GetResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adb.TailChainReplica', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TailClientStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.cxidProcessed = channel.unary_unary(
        '/adb.TailClient/cxidProcessed',
        request_serializer=chain__pb2.CxidProcessedRequest.SerializeToString,
        response_deserializer=chain__pb2.ChainResponse.FromString,
        )


class TailClientServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def cxidProcessed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TailClientServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'cxidProcessed': grpc.unary_unary_rpc_method_handler(
          servicer.cxidProcessed,
          request_deserializer=chain__pb2.CxidProcessedRequest.FromString,
          response_serializer=chain__pb2.ChainResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adb.TailClient', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
